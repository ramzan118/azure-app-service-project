trigger:
  branches:
    include:
      - develop

pool:
  vmImage: 'windows-latest'

variables:
  buildConfiguration: 'Release'

steps:
# 1) Checkout
- checkout: self

# 2) Prepare SonarCloud analysis
- task: SonarCloudPrepare@1
  inputs:
    SonarCloud: 'SonarCloudâ€“expo-org'       # your service connection name
    organization: 'expo-org'                # your SonarCloud org key
    scannerMode: 'CLI'
    configMode: 'manual'
    cliProjectKey: 'expo-project'           # same key you created above
    cliProjectName: 'Expo Project'
    # If your default branch is NOT 'main', specify:
    # cliBranches: 'develop'                # SonarCloud CLI extension 1.1+
# 3) Install .NET SDK
- task: UseDotNet@2
  inputs:
    packageType: sdk
    version: '6.0.x'

# 4) Restore, build, test
- script: dotnet restore
  displayName: 'Restore NuGet packages'

- script: dotnet build --configuration $(buildConfiguration)
  displayName: 'Build solution'

- script: dotnet test --configuration $(buildConfiguration) --no-build
  displayName: 'Run unit tests'

# 5) Run SonarCloud analysis
- task: SonarCloudAnalyze@1

# 6) Publish SonarCloud Quality Gate result to your pipeline
- task: SonarCloudPublish@1
  inputs:
    pollingTimeoutSec: '300'   # wait up to 5 min for the Quality Gate

# 7) Deploy to Azure Web App
- task: AzureWebApp@1
  inputs:
    azureSubscription: 'Azure subscription 1'
    appType: 'webAppLinux'
    appName: 'expo-backend-app'
    package: '$(System.DefaultWorkingDirectory)/**/bin/$(buildConfiguration)/**/*.zip'

# 8) Deploy static front-end
- task: AzureStaticWebApp@0
  inputs:
    app_location: '/'
    api_location: ''
    output_location: 'dist'
    skip_app_build: true
    azure_static_web_apps_api_token: $(deployment_token)

